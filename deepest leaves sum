#include <iostream>
#include <vector>

using namespace std;

struct TreeNode {
     int val;
     TreeNode *left;
     TreeNode *right;
     TreeNode() : val(0), left(nullptr), right(nullptr) {}
     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} 
};
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) 
    {
        int depth_root = depth(root);
        return sum(root, depth_root);

    }
    int depth(TreeNode* node)
    {
        if (node == NULL)
        {
            return 0;
        }
        return 1 + max(depth(node->left), depth(node->right));
    }
    int sum(TreeNode* node, int depth)
    {
        if (!node)
        {
            return 0;
        }
        if (depth == 1)
        {
            return node->val;
        }
        return sum(node->right, depth - 1) + sum(node->left, depth - 1);
    }
};

int main()
{

	return 0;
}

